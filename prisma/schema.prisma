generator client {
  provider = "prisma-client-js"
  output   = "../db/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @unique @default(uuid())
  name      String
  email     String    @unique
  phone     String?
  avatar    String?
  password  String?
  dob       String?
  addresses Address[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  reviews   Review[]
}

model Address {
  id           String @id @unique @default(uuid())
  city         String
  region_state String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  users  User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Admin {
  id       String @id @unique @default(uuid())
  name     String
  phone    String
  password String
  role     String @default("ADMIN")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Product {
  id                  String   @id @unique @default(uuid())
  name                String
  slug                String   @unique
  category            Category @relation(fields: [categoriesId], references: [id])
  price               Int?
  discount_percentage Int?
  rating              Float?
  sold                Int      @default(0)
  model               String?
  quantity            Int      @default(0)
  status              String   @default("In Stock")
  images              String[]
  videos              String[]
  reviews             Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  Order        Order?  @relation(fields: [orderId], references: [id])
  orderId      String?
  categoriesId String
}

model Order {
  id            String        @id @unique @default(uuid())
  products      Product[]
  subtotal      Int
  delivery_cost Int
  total         Int
  status        String        @default("Pending") // Pending, Delivered, Cancelled, completed
  last_message  String?
  delivery      DeliveryInfo? @relation(fields: [deliveryInfoId], references: [id])
  payment       PaymentInfo?  @relation(fields: [paymentInfoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  usersId        String
  deliveryInfoId String?
  paymentInfoId  String?
}

model DeliveryInfo {
  id           String   @id @unique @default(uuid())
  name         String
  phone        String
  secondPhone  String?
  city         String?
  state        String?
  zip          String?
  full_address String?
  method       String?
  messages     String[]
  expectedDate String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Order     Order[]
}

model PaymentInfo {
  id            String @id @unique @default(uuid())
  paymentMethod String @default("Cash") // bkash
  total_paid    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  Order Order[]
}

model Review {
  id      String   @id @unique @default(uuid())
  user    User     @relation(fields: [usersId], references: [id])
  comment String
  rating  Float?
  images  String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  products   Product? @relation(fields: [productsId], references: [id])
  productsId String?
  usersId    String
}

model Category {
  id   String  @id @unique @default(uuid())
  name String
  img  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  products Product[]
}
